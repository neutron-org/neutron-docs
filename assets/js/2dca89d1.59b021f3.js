"use strict";(self.webpackChunkneutron=self.webpackChunkneutron||[]).push([[4433],{3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>h});var a=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=a.createContext({}),c=function(n){var e=a.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},u=function(n){var e=c(n.components);return a.createElement(l.Provider,{value:e},n.children)},p="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(n,e){var t=n.components,o=n.mdxType,r=n.originalType,l=n.parentName,u=s(n,["components","mdxType","originalType","parentName"]),p=c(t),d=o,h=p["".concat(l,".").concat(d)]||p[d]||m[d]||r;return t?a.createElement(h,i(i({ref:e},u),{},{components:t})):a.createElement(h,i({ref:e},u))}));function h(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=t.length,i=new Array(r);i[0]=d;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s[p]="string"==typeof n?n:o,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},30026:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));const r={},i="Part 3: Building a simple Web Application",s={unversionedId:"tutorials/onboarding/part-3-building-simple-web-app",id:"tutorials/onboarding/part-3-building-simple-web-app",title:"Part 3: Building a simple Web Application",description:"In this part of the tutorial, we will learn how to build a simple web application that will interact with the contract",source:"@site/docs/tutorials/onboarding/part-3-building-simple-web-app.md",sourceDirName:"tutorials/onboarding",slug:"/tutorials/onboarding/part-3-building-simple-web-app",permalink:"/tutorials/onboarding/part-3-building-simple-web-app",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Part 2: Calling Modules and Contracts",permalink:"/tutorials/onboarding/part-2-calling-modules-and-contracts"},next:{title:"Integration tests for chain",permalink:"/tutorials/integration-tests/chain"}},l={},c=[{value:"Setup Next.js app",id:"setup-nextjs-app",level:2},{value:"Add CosmosKit",id:"add-cosmoskit",level:2},{value:"Brief overview of CosmosKit",id:"brief-overview-of-cosmoskit",level:2},{value:"Create a wallet button component",id:"create-a-wallet-button-component",level:2},{value:"First launch",id:"first-launch",level:2},{value:"Prepare your browser",id:"prepare-your-browser",level:3},{value:"Run CORS Proxy",id:"run-cors-proxy",level:3},{value:"Launch the app",id:"launch-the-app",level:3},{value:"Interact with the contract",id:"interact-with-the-contract",level:2}],u={toc:c},p="wrapper";function m(n){let{components:e,...t}=n;return(0,o.kt)(p,(0,a.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"part-3-building-a-simple-web-application"},"Part 3: Building a simple Web Application"),(0,o.kt)("p",null,"In this part of the tutorial, we will learn how to build a simple web application that will interact with the contract\nfrom the first part of this tutorial series. You need to have Neutron up and running, and the contract to be instantiated.\nYou can learn how to do all of that by following the first part of this tutorial."),(0,o.kt)("p",null,"To build the UI, we will be using:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://nextjs.org/"},"Next.js")," as a framework"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://ui.shadcn.com/"},"shadcn-ui")," for components"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.cosmology.zone/cosmos-kit"},"CosmosKit")," for wallets")),(0,o.kt)("p",null,"The final result of this tutorial can be found at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/neutron-org/onboarding/tree/main/minimal_ui"},"https://github.com/neutron-org/onboarding/tree/main/minimal_ui"),"."),(0,o.kt)("h2",{id:"setup-nextjs-app"},"Setup Next.js app"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/"},"Node.js")," v18 or higher.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create Next.js app:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-next-app@latest minimal_ui\n# - Would you like to use TypeScript: Yes\n# - Would you like to use ESLint: Yes\n# - Would you like to use Tailwind CSS: Yes\n# - Would you like to use `src/` directory: Yes\n# - Would you like to use App Router: Yes\n# - Would you like to customize the default import alias (@/*)?: No\n\ncd minimal_ui\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install shadcn-ui and add components:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx shadcn@latest init --defaults\nnpx shadcn@latest add button card input label\n")))),(0,o.kt)("h2",{id:"add-cosmoskit"},"Add CosmosKit"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install packages:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save @cosmos-kit/react @interchain-ui/react @cosmos-kit/core @cosmos-kit/keplr-extension @cosmjs/amino @cosmjs/proto-signing chain-registry @chain-registry/types\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create context ",(0,o.kt)("inlineCode",{parentName:"p"},"src/contexts/CosmosKit.tsx")," with the following content:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'"use client";\n\nimport { AssetList, Chain } from "@chain-registry/types";\nimport { GasPrice } from "@cosmjs/stargate";\n// You can add more wallets here\nimport { wallets as keplrExtension } from "@cosmos-kit/keplr-extension";\nimport { ChainProvider } from "@cosmos-kit/react";\nimport assert from "assert";\nimport { assets, chains } from "chain-registry";\nimport React from "react";\nimport "@interchain-ui/react/styles";\n\n// This is a Neutron Localnet chain, we need to add it manually because it\'s not in the chain registry.\n// This new chain can be based on Neutron Testnet, we just need to adjust some parameters.\nconst localnetChain: Chain = (() => {\n  const chain = chains.find(\n    (chain) => chain.chain_name === "neutrontestnet"\n  );\n  assert(chain);\n  return {\n    ...chain,\n    // Chain ID is a unique identifier for the chain. You can find one in `localnet_config.json`.\n    chain_id: "ntrntest",\n    // Chain name is another unique identifier for the chain that is used in CosmosKit.\n    chain_name: "neutronlocalnet",\n    // Pretty name is a human readable name for the chain.\n    pretty_name: "Neutron Localnet",\n    apis: {\n      ...chain.apis,\n      // RPC and REST endpoints are used to communicate with the chain.\n      // We provide proxy endpoints here, which can be found in the "First launch" section.\n      rpc: [{ address: "http://localhost:3001/proxy" }],\n      rest: [{ address: "http://localhost:3002/proxy" }],\n    },\n  };\n})();\n\n// The same for assets\nconst localnetAssets: AssetList = (() => {\n  const asset = assets.find(\n    (asset) => asset.chain_name === "neutrontestnet"\n  );\n  assert(asset);\n  return {\n    ...asset,\n    chain_name: "neutronlocalnet",\n  };\n})();\n\nexport const CosmosKitProvider = ({\n  children,\n}: {\n  children: React.ReactNode;\n}) => (\n  <ChainProvider\n    chains={[...chains, localnetChain]}\n    assetLists={[...assets, localnetAssets]}\n    // We need to specify gas price to be able to sign transactions.\n    // The provided value works just fine for the localnet.\n    signerOptions={{\n      signingCosmwasm: () => ({\n        gasPrice: GasPrice.fromString("0.01untrn"),\n      }),\n      signingStargate: () => ({\n        gasPrice: GasPrice.fromString("0.01untrn"),\n      }),\n    }}\n    wallets={[...keplrExtension]}\n  >\n    {children}\n  </ChainProvider>\n);\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add context by replacing the content of ",(0,o.kt)("inlineCode",{parentName:"p"},"src/app/layout.tsx")," with the following:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { CosmosKitProvider } from "@/contexts/CosmosKit";\nimport type { Metadata } from "next";\nimport "./globals.css";\n\nexport const metadata: Metadata = {\n  title: "Minimal UI",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang="en">\n      <body>\n        <CosmosKitProvider>{children}</CosmosKitProvider>\n      </body>\n    </html>\n  );\n}\n')))),(0,o.kt)("h2",{id:"brief-overview-of-cosmoskit"},"Brief overview of CosmosKit"),(0,o.kt)("p",null,"CosmosKit is a library that allows you to easily communicate with different Cosmos chains and wallets.\nTo use it you setup a context with a list of chains and wallets you want to support."),(0,o.kt)("p",null,"Then you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"useChain")," hook to connect to communicate with a specific chain like this:"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The code below is an example of how to use CosmosKit. Don't copy it to the project!")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const {\n    address,\n    connect,\n    disconnect,\n    getCosmWasmClient,\n    getSigningCosmWasmClient,\n} = useChain("neutronlocalnet", true);\n\n// `address` is the address of the connected wallet.\n// It is undefined if no wallet is connected.\nconsole.log("Your address:", address ?? "Not connected");\n\n// `connect` is a function that opens a modal to connect to a wallet.\nawait connect();\n\n// `disconnect` is a function to disconnect from a wallet.\nawait disconnect();\n\n// `getCosmWasmClient` is a function that returns a CosmWasmClient for the connected chain.\n// This client is used to make queries.\nconst client = await getCosmWasmClient();\nconst balance = await client.getBalance(address, "untrn");\nconsole.log("Your balance:", balance);\n\n// `getSigningCosmWasmClient` is a function that returns a SigningCosmWasmClient for the connected chain.\n// This client is used to sign transactions.\nconst client = await getSigningCosmWasmClient();\nconst {transactionHash} = await client.sendTokens(\n    address,\n    receiver,\n    [\n        {\n            amount: "1000000",\n            denom: "untrn",\n        },\n    ],\n    "auto"\n);\nconsole.log("TX hash:", transactionHash);\n')),(0,o.kt)("h2",{id:"create-a-wallet-button-component"},"Create a wallet button component"),(0,o.kt)("p",null,"This component will be used to open CosmosKit wallets modal and perform connection to a wallet."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a component with wallet button in ",(0,o.kt)("inlineCode",{parentName:"p"},"src/components/WalletButton.tsx"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Button } from "@/components/ui/button";\nimport { useChain } from "@cosmos-kit/react";\n\nconst formatAddress = (address: string) => {\n  return address.slice(0, 11) + "..." + address.slice(-3);\n};\n\nexport const WalletButton = () => {\n  const { address, connect } = useChain("neutronlocalnet", true);\n\n  return (\n    <Button\n      variant={address ? "outline" : "default"}\n      type="button"\n      onClick={connect}\n    >\n      {address ? formatAddress(address) : "Connect Wallet"}\n    </Button>\n  );\n};\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Replace the ",(0,o.kt)("inlineCode",{parentName:"p"},"src/app/page.tsx")," with the following content:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'"use client";\n\nimport { WalletButton } from "@/components/WalletButton";\n\nexport default function Home() {\n  return (\n    <main className="flex flex-col gap-8 items-center justify-center h-screen">\n      <WalletButton />\n    </main>\n  );\n}\n')))),(0,o.kt)("h2",{id:"first-launch"},"First launch"),(0,o.kt)("p",null,"Now we have a simple UI that can connect to a wallet. Let's try it out."),(0,o.kt)("h3",{id:"prepare-your-browser"},"Prepare your browser"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install ",(0,o.kt)("a",{parentName:"p",href:"https://www.keplr.app/#extension"},"Keplr Wallet Extension"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"When prompted to create a wallet, click ",(0,o.kt)("inlineCode",{parentName:"p"},"Import an existing wallet")," and then\nclick ",(0,o.kt)("inlineCode",{parentName:"p"},"Use recovery phrase or private key"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Enter mnemonic from ",(0,o.kt)("a",{parentName:"p",href:"/tutorials/onboarding/part-1-minimal-application#run-the-localnet"},"Part 1"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"kiwi valid tiger wish shop time exile client metal view spatial ahead\n")))),(0,o.kt)("h3",{id:"run-cors-proxy"},"Run CORS Proxy"),(0,o.kt)("p",null,"Before we can do anything with the local chain, we need to launch\na ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/local-cors-proxy"},"Local CORS Proxy")," for the localnet.\nRun the following commands in a separate terminals and keep them in the background:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx local-cors-proxy@latest --proxyUrl http://0.0.0.0:26657 --port 3001\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx local-cors-proxy@latest --proxyUrl http://0.0.0.0:1317 --port 3002\n")),(0,o.kt)("h3",{id:"launch-the-app"},"Launch the app"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm run dev\n")),(0,o.kt)("p",null,"And open it in the browser: http://localhost:3000"),(0,o.kt)("p",null,"Now you should see a wallet button and should be able to connect to a wallet."),(0,o.kt)("h2",{id:"interact-with-the-contract"},"Interact with the contract"),(0,o.kt)("p",null,"In this UI we provide an example of interacting with the contract created\nin ",(0,o.kt)("a",{parentName:"p",href:"/tutorials/onboarding/part-1-minimal-application"},"Part 1"),"."),(0,o.kt)("admonition",{title:"Contract address",type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"The address of your contract might be different from what you see in this tutorial. Make sure that you are replacing\nthe addresses from the commands below with the address of ",(0,o.kt)("strong",{parentName:"p"},"your")," contract!")),(0,o.kt)("p",null,"To interact with the contract we'll be using ",(0,o.kt)("inlineCode",{parentName:"p"},"CosmWasmClient")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"SigningCosmWasmClient"),"\nfrom ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cosmos/cosmjs/tree/main"},"CosmJS"),"."),(0,o.kt)("p",null,"Querying value from the contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const client = await getCosmWasmClient();\n\nconst {current_value} = (await client.queryContractSmart(\n    "neutron1nyuryl5u5z04dx4zsqgvsuw7fe8gl2f77yufynauuhklnnmnjncqcls0tj",\n    {current_value: {}}\n)) as Promise<{ current_value: string }>;\n\nconsole.log(current_value);\n')),(0,o.kt)("p",null,"Executing a message:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const client = await getSigningCosmWasmClient();\n\nconst {transactionHash} = await client.execute(\n    address,\n    "neutron1nyuryl5u5z04dx4zsqgvsuw7fe8gl2f77yufynauuhklnnmnjncqcls0tj",\n    {\n        increase_count: {\n            amount: "1",\n        },\n    },\n    "auto"\n);\n\nconsole.log(transactionHash);\n')),(0,o.kt)("p",null,"Let's create a component that will do this for us."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a component in ",(0,o.kt)("inlineCode",{parentName:"p"},"src/components/Counter.tsx"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Button } from "@/components/ui/button";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from "@/components/ui/card";\nimport { Input } from "@/components/ui/input";\nimport { Label } from "@/components/ui/label";\nimport { useChain } from "@cosmos-kit/react";\nimport assert from "assert";\nimport { useCallback, useEffect, useState } from "react";\n\n// Your contract address here\nconst CONTRACT_ADDRESS =\n  "neutron1nyuryl5u5z04dx4zsqgvsuw7fe8gl2f77yufynauuhklnnmnjncqcls0tj";\n\nconst useCounter = () => {\n  const { address, getCosmWasmClient, getSigningCosmWasmClient } = useChain(\n    "neutronlocalnet",\n    true\n  );\n\n  const [value, setValue] = useState<string | undefined>();\n\n  const fetchValue = useCallback(async () => {\n    const client = await getCosmWasmClient();\n\n    const { current_value } = (await client.queryContractSmart(\n      CONTRACT_ADDRESS,\n      { current_value: {} }\n    )) as { current_value: string };\n\n    setValue(current_value);\n  }, [getCosmWasmClient]);\n\n  const increaseValue = useCallback(\n    async (amount: string) => {\n      assert(address, "Address is required");\n\n      const client = await getSigningCosmWasmClient();\n\n      const { transactionHash } = await client.execute(\n        address,\n        CONTRACT_ADDRESS,\n        {\n          increase_count: {\n            amount,\n          },\n        },\n        "auto"\n      );\n\n      void fetchValue();\n\n      return transactionHash;\n    },\n    [address, getSigningCosmWasmClient, fetchValue]\n  );\n\n  useEffect(() => {\n    void fetchValue();\n  }, [fetchValue]);\n\n  return { value, increaseValue };\n};\n\nexport const Counter = () => {\n  const { address } = useChain("neutronlocalnet", true);\n\n  const { value, increaseValue } = useCounter();\n\n  const [amount, setAmount] = useState("");\n\n  const handleAmountChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setAmount(event.currentTarget.value);\n    },\n    []\n  );\n\n  const handleIncreaseClick = useCallback(async () => {\n    if (!address || !amount) return;\n\n    const transactionHash = await increaseValue(amount);\n    console.log(transactionHash);\n\n    setAmount("");\n  }, [address, amount, increaseValue]);\n\n  return (\n    <Card className="w-[350px]">\n      <CardHeader>\n        <CardTitle>Counter contract</CardTitle>\n      </CardHeader>\n\n      <CardContent>\n        <div className="grid w-full items-center gap-4">\n          <div className="flex flex-col space-y-1.5">\n            <Label htmlFor="value">Current value</Label>\n            <Input id="value" value={value ?? ""} disabled />\n          </div>\n\n          <div className="flex flex-col space-y-1.5">\n            <Label htmlFor="amount">Amount to increase</Label>\n            <Input\n              id="amount"\n              type="number"\n              min="1"\n              value={amount}\n              onChange={handleAmountChange}\n            />\n          </div>\n        </div>\n      </CardContent>\n\n      <CardFooter className="flex justify-between">\n        <Button\n          disabled={!address || !amount}\n          type="button"\n          onClick={handleIncreaseClick}\n        >\n          Increase\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n};\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add ",(0,o.kt)("inlineCode",{parentName:"p"},"Counter")," component to ",(0,o.kt)("inlineCode",{parentName:"p"},"src/app/page.tsx"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'"use client";\n\nimport { Counter } from "@/components/Counter";\nimport { WalletButton } from "@/components/WalletButton";\n\nexport default function Home() {\n  return (\n    <main className="flex flex-col gap-8 items-center justify-center h-screen">\n      <WalletButton />\n      <Counter />\n    </main>\n  );\n}\n')))),(0,o.kt)("p",null,"Now you should be able to see the counter value in UI and be able to increase it."))}m.isMDXComponent=!0}}]);