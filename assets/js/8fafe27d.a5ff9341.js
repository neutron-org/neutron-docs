"use strict";(self.webpackChunkneutron=self.webpackChunkneutron||[]).push([[54933],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=o,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||a;return t?r.createElement(f,i(i({ref:n},l),{},{components:t})):r.createElement(f,i({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},60924:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const a={},i="Messages",s={unversionedId:"neutron/token-generation-event/price-feed/messages",id:"version-1.0/neutron/token-generation-event/price-feed/messages",title:"Messages",description:"Instantiate",source:"@site/versioned_docs/version-1.0/neutron/token-generation-event/price-feed/messages.md",sourceDirName:"neutron/token-generation-event/price-feed",slug:"/neutron/token-generation-event/price-feed/messages",permalink:"/1.0/neutron/token-generation-event/price-feed/messages",draft:!1,tags:[],version:"1.0",frontMatter:{},sidebar:"docs",previous:{title:"Overview",permalink:"/1.0/neutron/token-generation-event/price-feed/overview"},next:{title:"Queries",permalink:"/1.0/neutron/token-generation-event/price-feed/queries"}},u={},c=[{value:"Instantiate",id:"instantiate",level:2},{value:"Execute",id:"execute",level:2},{value:"<code>request</code>",id:"request",level:3},{value:"<code>update_config</code>",id:"update_config",level:3},{value:"<code>update_owner</code>",id:"update_owner",level:3}],l={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"messages"},"Messages"),(0,o.kt)("h2",{id:"instantiate"},"Instantiate"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  // A unique ID for the oracle request\n  "client_id": "cw-band-price-feed",\n  // The oracle script ID to query\n  "oracle_script_id": 3,\n  // The number of validators that are requested to respond\n  "ask_count": 1,\n  // The minimum number of validators that need to respond\n  "min_count": 1,\n  // The maximum amount of band in uband to be paid to the data source providers\n  // e.g. vec![Coin::new(100, "uband")]\n  "fee_limit": [{"amount":"100000","denom":"uband"}],\n  // Amount of gas to pay to prepare raw requests\n  "prepare_gas": 1000,\n  // Amount of gas reserved for execution\n  "execute_gas": 5000,\n  // Minimum number of sources required to return a successful response\n  "multiplier": 1000000,\n  // The list of symbols to query\n  "symbols": ["ATOM", "USDC"],\n  // The owner of the contract\n  "owner": "neutron...",\n  // The maximum time interval between updates in seconds\n  "max_update_interval": "100"\n}\n')),(0,o.kt)("h2",{id:"execute"},"Execute"),(0,o.kt)("h3",{id:"request"},(0,o.kt)("inlineCode",{parentName:"h3"},"request")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "request": {}\n}\n')),(0,o.kt)("p",null,"Instantiates a request for a new price data from Band Protocol."),(0,o.kt)("h3",{id:"update_config"},(0,o.kt)("inlineCode",{parentName:"h3"},"update_config")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "update_config": {\n    "new_config": {\n      // A unique ID for the oracle request\n      "client_id": "cw-band-price-feed",\n      // The oracle script ID to query\n      "oracle_script_id": 3,\n      // The number of validators that are requested to respond\n      "ask_count": 1,\n      // The minimum number of validators that need to respond\n      "min_count": 1,\n      // The maximum amount of band in uband to be paid to the data source providers\n      // e.g. vec![Coin::new(100, "uband")]\n      "fee_limit": [{"amount":"100000","denom":"uband"}],\n      // Amount of gas to pay to prepare raw requests\n      "prepare_gas": 1000,\n      // Amount of gas reserved for execution\n      "execute_gas": 5000,\n      // Minimum number of sources required to return a successful response\n      "multiplier": 1000000,\n      // The list of symbols to query\n      "symbols": ["ATOM", "USDC"],\n      // The maximum time interval between updates in seconds\n      "max_update_interval": "100"\n    }\n  }\n}\n')),(0,o.kt)("p",null,"Owner only method. Updates contract's configuration."),(0,o.kt)("h3",{id:"update_owner"},(0,o.kt)("inlineCode",{parentName:"h3"},"update_owner")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "update_owner": {\n    "new_owner": "neutron..."\n  }\n}\n')),(0,o.kt)("p",null,"Owner only method. Updates contract's owner."))}d.isMDXComponent=!0}}]);