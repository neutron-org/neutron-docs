"use strict";(self.webpackChunkneutron=self.webpackChunkneutron||[]).push([[95637],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),d=o,m=c["".concat(s,".").concat(d)]||c[d]||f[d]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},12064:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(87462),o=(n(67294),n(3905));const a={},i="State",l={unversionedId:"neutron/modules/feerefunder/state",id:"version-2.0/neutron/modules/feerefunder/state",title:"State",description:"The FeeRefunder module stores one FeeInfo per channelid, portid and sequence.",source:"@site/versioned_docs/version-2.0/neutron/modules/feerefunder/state.md",sourceDirName:"neutron/modules/feerefunder",slug:"/neutron/modules/feerefunder/state",permalink:"/2.0/neutron/modules/feerefunder/state",draft:!1,tags:[],version:"2.0",frontMatter:{},sidebar:"docs",previous:{title:"Client",permalink:"/2.0/neutron/modules/feerefunder/client"},next:{title:"Events",permalink:"/2.0/neutron/modules/feerefunder/events"}},s={},u=[],p={toc:u},c="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"state"},"State"),(0,o.kt)("p",null,"The FeeRefunder module stores one ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/neutron-org/neutron/blob/v2.0.3/proto/feerefunder/genesis.proto#L18"},"FeeInfo")," per ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/neutron-org/neutron/blob/v2.0.3/x/feerefunder/types/keys.go#L28"},(0,o.kt)("inlineCode",{parentName:"a"},"channel_id"),", ",(0,o.kt)("inlineCode",{parentName:"a"},"port_id")," and ",(0,o.kt)("inlineCode",{parentName:"a"},"sequence")),".\n",(0,o.kt)("inlineCode",{parentName:"p"},"FeeInfo")," contains all the necessary info to store data about fees to properly refund relayers and return fees to the original caller of IBC messages:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"payer")," - stores an address of the smart-contract which issues ",(0,o.kt)("inlineCode",{parentName:"li"},"Transfer")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"SubmitTx")," message;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"packet_id")," - stores an info about an IBC packet for which ",(0,o.kt)("inlineCode",{parentName:"li"},"ack")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"timeout")," submission relayers should be refunded;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fee")," - stores amount of fee to refund relayers for the submission of IBC packets.")))}f.isMDXComponent=!0}}]);