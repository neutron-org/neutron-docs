"use strict";(self.webpackChunkneutron=self.webpackChunkneutron||[]).push([[24227],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=m(n),c=o,g=d["".concat(s,".").concat(c)]||d[c]||p[c]||a;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var m=2;m<a;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2790:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>m});var r=n(87462),o=(n(67294),n(3905));const a={},i="Messages",l={unversionedId:"neutron/modules/3rdparty/osmosis/tokenfactory/messages",id:"version-1.0/neutron/modules/3rdparty/osmosis/tokenfactory/messages",title:"Messages",description:"CreateDenom",source:"@site/versioned_docs/version-1.0/neutron/modules/3rdparty/osmosis/tokenfactory/messages.md",sourceDirName:"neutron/modules/3rdparty/osmosis/tokenfactory",slug:"/neutron/modules/3rdparty/osmosis/tokenfactory/messages",permalink:"/1.0/neutron/modules/3rdparty/osmosis/tokenfactory/messages",draft:!1,tags:[],version:"1.0",frontMatter:{},sidebar:"docs",previous:{title:"Overview",permalink:"/1.0/neutron/modules/3rdparty/osmosis/tokenfactory/overview"},next:{title:"Overview",permalink:"/1.0/neutron/modules/3rdparty/osmosis/ibc-hooks/overview"}},s={},m=[{value:"CreateDenom",id:"createdenom",level:3},{value:"Mint",id:"mint",level:3},{value:"Burn",id:"burn",level:3}],u={toc:m},d="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"messages"},"Messages"),(0,o.kt)("h3",{id:"createdenom"},"CreateDenom"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Creates a denom of ",(0,o.kt)("inlineCode",{parentName:"li"},"factory/{creator address}/{subdenom}")," given the denom creator address and the subdenom. Subdenoms can contain ",(0,o.kt)("inlineCode",{parentName:"li"},"[a-zA-Z0-9./]"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{.go}"},'message MsgCreateDenom {\n  string sender = 1 [ (gogoproto.moretags) = "yaml:\\"sender\\"" ];\n  string subdenom = 2 [ (gogoproto.moretags) = "yaml:\\"subdenom\\"" ];\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"State Modifications:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Fund community pool with the denom creation fee from the creator address, set in ",(0,o.kt)("inlineCode",{parentName:"li"},"Params")),(0,o.kt)("li",{parentName:"ul"},"Set ",(0,o.kt)("inlineCode",{parentName:"li"},"DenomMetaData")," via bank keeper"),(0,o.kt)("li",{parentName:"ul"},"Set ",(0,o.kt)("inlineCode",{parentName:"li"},"AuthorityMetadata")," for the given denom to store the admin for the created denom ",(0,o.kt)("inlineCode",{parentName:"li"},"factory/{creator address}/{subdenom}"),". Admin is automatically set as the Msg sender"),(0,o.kt)("li",{parentName:"ul"},"Add denom to the ",(0,o.kt)("inlineCode",{parentName:"li"},"CreatorPrefixStore"),", where a state of denoms created per creator is kept")),(0,o.kt)("h3",{id:"mint"},"Mint"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Minting of a specific denom is only allowed for the creator of the denom registered during ",(0,o.kt)("inlineCode",{parentName:"li"},"CreateDenom"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{.go}"},'message MsgMint {\n  string sender = 1 [ (gogoproto.moretags) = "yaml:\\"sender\\"" ];\n  cosmos.base.v1beta1.Coin amount = 2 [\n    (gogoproto.moretags) = "yaml:\\"amount\\"",\n    (gogoproto.nullable) = false\n  ];\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"State Modifications:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Safety check the following",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Check that the denom minting is created via ",(0,o.kt)("inlineCode",{parentName:"li"},"tokenfactory")," module"),(0,o.kt)("li",{parentName:"ul"},"Check that the sender of the message is the admin of the denom"))),(0,o.kt)("li",{parentName:"ul"},"Mint designated amount of tokens for the denom via ",(0,o.kt)("inlineCode",{parentName:"li"},"bank")," module")),(0,o.kt)("h3",{id:"burn"},"Burn"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Burning of a specific denom is only allowed for the creator of the denom registered during ",(0,o.kt)("inlineCode",{parentName:"li"},"CreateDenom"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{.go}"},'message MsgBurn {\n  string sender = 1 [ (gogoproto.moretags) = "yaml:\\"sender\\"" ];\n  cosmos.base.v1beta1.Coin amount = 2 [\n    (gogoproto.moretags) = "yaml:\\"amount\\"",\n    (gogoproto.nullable) = false\n  ];\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"State Modifications:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Saftey check the following",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Check that the denom minting is created via ",(0,o.kt)("inlineCode",{parentName:"li"},"tokenfactory")," module"),(0,o.kt)("li",{parentName:"ul"},"Check that the sender of the message is the admin of the denom"))),(0,o.kt)("li",{parentName:"ul"},"Burn designated amount of tokens for the denom via ",(0,o.kt)("inlineCode",{parentName:"li"},"bank")," module")))}p.isMDXComponent=!0}}]);