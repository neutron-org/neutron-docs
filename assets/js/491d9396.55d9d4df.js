"use strict";(self.webpackChunkneutron=self.webpackChunkneutron||[]).push([[49550],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>f});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),m=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},p=function(e){var r=m(e.components);return n.createElement(i.Provider,{value:r},e.children)},u="mdxType",l={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=m(t),d=o,f=u["".concat(i,".").concat(d)]||u[d]||l[d]||a;return t?n.createElement(f,s(s({ref:r},p),{},{components:t})):n.createElement(f,s({ref:r},p))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=d;var c={};for(var i in r)hasOwnProperty.call(r,i)&&(c[i]=r[i]);c.originalType=e,c[u]="string"==typeof e?e:o,s[1]=c;for(var m=2;m<a;m++)s[m]=t[m];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},77560:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>c,toc:()=>m});var n=t(87462),o=(t(67294),t(3905));const a={},s="Params",c={unversionedId:"neutron/modules/3rdparty/osmosis/tokenfactory/params",id:"version-3.0/neutron/modules/3rdparty/osmosis/tokenfactory/params",title:"Params",description:"The TokenFactory module uses params in this format:",source:"@site/versioned_docs/version-3.0/neutron/modules/3rdparty/osmosis/tokenfactory/params.md",sourceDirName:"neutron/modules/3rdparty/osmosis/tokenfactory",slug:"/neutron/modules/3rdparty/osmosis/tokenfactory/params",permalink:"/3.0/neutron/modules/3rdparty/osmosis/tokenfactory/params",draft:!1,tags:[],version:"3.0",frontMatter:{},sidebar:"docs",previous:{title:"Messages",permalink:"/3.0/neutron/modules/3rdparty/osmosis/tokenfactory/messages"},next:{title:"Overview",permalink:"/3.0/neutron/modules/3rdparty/osmosis/ibc-hooks/overview"}},i={},m=[],p={toc:m},u="wrapper";function l(e){let{components:r,...t}=e;return(0,o.kt)(u,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"params"},"Params"),(0,o.kt)("p",null,"The TokenFactory module uses params in this format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'// Params defines the parameters for the tokenfactory module.\nmessage Params {\n  // DenomCreationFee defines the fee to be charged on the creation of a new\n  // denom. The fee is drawn from the MsgCreateDenom\'s sender account, and\n  // transferred to the community pool.\n  repeated cosmos.base.v1beta1.Coin denom_creation_fee = 1 [\n    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",\n    (gogoproto.moretags) = "yaml:\\"denom_creation_fee\\"",\n    (gogoproto.nullable) = false\n  ];\n\n  // DenomCreationGasConsume defines the gas cost for creating a new denom.\n  // This is intended as a spam deterrence mechanism.\n  //\n  // See: https://github.com/CosmWasm/token-factory/issues/11\n  uint64 denom_creation_gas_consume = 2 [\n    (gogoproto.moretags) = "yaml:\\"denom_creation_gas_consume\\"",\n    (gogoproto.nullable) = true\n  ];\n\n  // FeeCollectorAddress is the address where fees collected from denom creation are sent to\n  string fee_collector_address = 3;\n}\n')))}l.isMDXComponent=!0}}]);